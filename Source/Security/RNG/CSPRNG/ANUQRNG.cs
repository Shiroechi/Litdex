using System;
using System.Net;

using Litdex.Security.RNG;
using Litdex.Utilities.Extension;

namespace Litdex.Source.Security.RNG.CSPRNG
{
	/// <summary>
	/// Australian National University Quantum Random Number Generator. 
	/// <para>
	/// All number generated by measuring the quantum fluctuations of the vacuum.
	/// </para>
	/// <para>
	/// website: https://qrng.anu.edu.au/
	/// </para>
	/// </summary>
	public class ANUQRNG : IRNG
	{
		#region Member

		private readonly string _BaseUrl;
		private readonly ushort _Max = 1024;
		private readonly ANUType _Type;

		#endregion Member

		#region Constrcutor & Destructor

		/// <summary>
		/// Create RNG instance.
		/// </summary>
		/// <param name="type">Data type to get.</param>
		public ANUQRNG(ANUType type = ANUType.HEX16)
		{
			this._BaseUrl = "https://qrng.anu.edu.au/API/jsonI.php?";
			this._Type = type;
		}

		~ANUQRNG()
		{

		}

		#endregion Constrcutor & Destructor

		#region Protected

		/// <summary>
		/// Create API url for generate JSON data from ANU.
		/// </summary>
		/// <param name="size">Length of string (HEX16 type only)</param>
		/// <param name="length">How many record to get.</param>
		/// <returns></returns>
		protected string UrlBuilder(ushort length = 1, ushort size = 1024)
		{
			return this._BaseUrl + 
				"length=" + length +
				"&type=" + this._Type.ToString().ToLower() +
				"&size=" + size;
		}

		/// <summary>
		/// Generate random data.
		/// </summary>
		/// <param name="length">Record to retrieve.</param>
		/// <param name="size">Length of rach record (HEX16 only).</param>
		/// <returns></returns>
		protected string Next(ushort length, ushort size)
		{
			if (length <= 0 || length > this._Max)
			{
				throw new ArgumentException("Length must be between 1 and " + this._Max + ".");
			}

			if (size <= 0 || size > this._Max)
			{
				throw new ArgumentException("Length must be between 1 and " + this._Max + ".");
			}

			string result = "";

			using (var client = new WebClient())
			{
				var text = client.DownloadString(this.UrlBuilder(length, size));
				int start = text.IndexOf("[");
				result = text.Substring(start + 2, size);
			}
			return result;
		}
		
		#endregion Protected

		#region Public

		public string AlgorithmName()
		{
			return "ANU QRNG";
		}

		public void Reseed()
		{
			// do nothing
		}

		public bool NextBoolean()
		{
			return this.NextInt() % 2 == 0;
		}

		public virtual byte NextByte()
		{
			return this.GetBytes(1)[0];
		}

		public virtual byte NextByte(byte lower, byte upper)
		{
			if (lower >= upper)
			{
				throw new ArgumentException("The lower bound must not be greater than or equal to the upper bound.");
			}

			byte diff = (byte)(upper - lower + 1);
			return (byte)(lower + (this.NextByte() % diff));
		}

		public uint NextInt()
		{
			return BitConverter.ToUInt32(this.Next(1, 8).DecodeBase16(), 0);
		}

		public uint NextInt(uint lower, uint upper)
		{
			if (lower >= upper)
			{
				throw new ArgumentException("The lower bound must not be greater than or equal to the upper bound.");
			}

			uint diff = upper - lower + 1;
			return lower + (this.NextInt() % diff);
		}

		public ulong NextLong()
		{
			return BitConverter.ToUInt64(this.Next(1, 16).DecodeBase16(), 0);
		}

		public ulong NextLong(ulong lower, ulong upper)
		{
			if (lower >= upper)
			{
				throw new ArgumentException("The lower bound must not be greater than or equal to the upper bound.");
			}

			ulong diff = upper - lower + 1;
			return lower + (this.NextLong() % diff);
		}

		public double NextDouble()
		{
			return NextLong() * (1L << 53);
		}

		public double NextDouble(double lower, double upper)
		{
			if (lower >= upper)
			{
				throw new ArgumentException("The lower bound must not be greater than or equal to the upper bound.");
			}

			double diff = upper - lower + 1;
			return lower + (this.NextDouble() % diff);
		}

		public byte[] GetBytes(int length = 512)
		{
			if (length <= 0 || length > this._Max)
			{
				throw new ArgumentException("Length must be between 1 and " + this._Max + ".");
			}

			var result = this.Next(1, (ushort)length);
			return result.DecodeBase16();
		}

		#endregion Public
	}

	/// <summary>
	/// Data type of ANU QRNG
	/// </summary>
	public enum ANUType
	{
		UINT8,
		UINT16,
		HEX16
	}
}
